from logic import DB_Manager
from config import *
from config import TOKEN
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove() 

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
def cansel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info üòâ.", reply_markup=hideBoard)
  
def no_projects(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—à—å—é –∫–æ–º–∞–Ω–¥—ã /new_project üìé.')

def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

attributes_of_projects = {'–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞' : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "project_name"],
                          "–û–ø–∏—Å–∞–Ω–∏–µ" : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "description"],
                          "–°—Å—ã–ª–∫–∞" : ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "url"],
                          "–°—Ç–∞—Ç—É—Å" : ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", "status_id"]}

def info_project(message, user_id, project_name):
    info = manager.get_project_info(user_id, project_name)[0]
    skills = manager.get_project_skills(project_name)
    if not skills:
        skills = '–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    bot.send_message(message.chat.id, f"""Project name: {info[0]}
Description: {info[1]}
Link: {info[2]}
Status: {info[3]}
Skills: {skills}
""")
#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ üí†. 
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö üòÄ!) 
""")
    info(message)

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""
–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:

/new_project - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ‚ûï,
/skills - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∫ –ø—Ä–æ–µ–∫—Ç—É üõ†Ô∏è,
/projects - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ üìÇ,
/delete - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ üóëÔ∏è,
/update_projects - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ üîÑ.

–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º üí°!""")

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['new_project'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, name_project)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
#–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
def name_project(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, description_project, data=data)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
#–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å—Å—ã–ª–∫–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
def description_project(message, data):
    description = message.text
    data.append(description)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç:")
    bot.register_next_step_handler(message, link_project, data=data)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
#–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ–µ–∫—Ç–∞
def link_project(message, data):
    data.append(message.text)
    statuses = [x[0] for x in manager.get_statuses()] 
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
#–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
def callback_project(message, data, statuses):
    status = message.text

    if status == cancel_button:
        cansel(message)
        return

    if status not in statuses:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üéØ!", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)
        return

    status_id = manager.get_status_id(status)
    data.append(status_id)

    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=gen_markup(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"])
    )
    bot.register_next_step_handler(message, save_project, data=data)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
def save_project(message, data):
    user_id, name, description, url, status_id = data

    if message.text == cancel_button:
        cansel(message)
        return

    file_id = None
    file_blob = None

    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        pass
    elif message.photo:
        photo = message.photo[-1]
        file_id = photo.file_id

        file_info = bot.get_file(file_id)
        file_blob = bot.download_file(file_info.file_path)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        bot.register_next_step_handler(message, save_project, data=data)
        return

    manager.insert_full_project(user_id, name, description, url, status_id, file_id, file_blob)
    bot.send_message(message.chat.id, "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úî!", reply_markup=hideBoard)

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∫ –ø—Ä–æ–µ–∫—Ç—É
@bot.message_handler(commands=['skills'])
def skill_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫ üéØ.', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        no_projects(message)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–≤—ã–∫–∞
def skill_project(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
        
    if project_name not in projects:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ‚ùå, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üîÉ! –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫ üéØ.', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        skills = [x[1] for x in manager.get_skills()]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫ üõ†.', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –∫ –ø—Ä–æ–µ–∫—Ç—É
def set_skill(message, project_name, skills):
    skill = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
        
    if skill not in skills:
        bot.send_message(message.chat.id, '–í–∏–¥–∏–º–æ, —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞–≤—ã–∫ –Ω–µ –∏–∑ —Å–ø–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üîÉ! –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫ üõ†.', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)
        return
    manager.insert_skill(user_id, project_name, skill )
    bot.send_message(message.chat.id, f'–ù–∞–≤—ã–∫ {skill} –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç—É {project_name} ‚úî.', reply_markup=hideBoard)

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
@bot.message_handler(commands=['projects'])
def get_projects(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"Project name:{x[2]} \nLink:{x[4]}\n" for x in projects])
        bot.send_message(message.chat.id, text, reply_markup=gen_inline_markup([x[2] for x in projects]))
    else:
        no_projects(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    project_name = call.data
    info_project(call.message, call.from_user.id, project_name)

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"Project name:{x[2]} \nLink:{x[4]}\n" for x in projects])
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
    else:
        no_projects(message)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
def delete_project(message, projects):
    project = message.text
    user_id = message.from_user.id

    if message.text == cancel_button:
        cansel(message)
        return
    if project not in projects:
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ‚ùå, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑ üîÉ!', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
        return
    project_id = manager.get_project_id(project, user_id)
    manager.delete_project(user_id, project_id)
    bot.send_message(message.chat.id, f'–ü—Ä–æ–µ–∫—Ç {project} —É–¥–∞–ª–µ–Ω üßπ!', reply_markup=hideBoard)

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
@bot.message_handler(commands=['update_projects'])
def update_project(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å üéØ.", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
    else:
        no_projects(message)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def update_project_step_2(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å, –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ:", reply_markup=gen_markup(attributes_of_projects.keys()))
    bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å, —Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
def update_project_step_3(message, project_name):
    attribute = message.text
    reply_markup = None 
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_projects.keys():
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è üßê, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üîÉ!", reply_markup=gen_markup(attributes_of_projects.keys()))
        bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup=gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_projects[attribute][0], reply_markup = reply_markup)
    bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attributes_of_projects[attribute][1])

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
def update_project_step_4(message, project_name, attribute): 
    update_info = message.text
    if attribute== "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
        else:
            bot.send_message(message.chat.id, "–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üîÑ!", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attribute)
            return
    user_id = message.from_user.id
    data = (update_info, project_name, user_id)
    manager.update_projects(attribute, data)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ üïä! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã üôå!", reply_markup=hideBoard)

#–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
#–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    projects =[ x[2] for x in manager.get_projects(user_id)]
    project = message.text
    if project in projects:
        info_project(message, user_id, project)
        return
    bot.reply_to(message, "–¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å üîÜ?")
    info(message)

  
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()